diff shasum VirtualBox.vdi signature

Une VM créer un environnement simulé sur un ordinateur 

Hyperviseur : VirtualBox ici
Isolation : Prend une partie de la RAM, du CPU et stockage
Simulation : Simule le matériel d'un ordinateur
Execution : On peut installer un systeme d'exploitation sur la VM

Debian Ubuntu

Debian, plus simple a prendre en main
Rocky est plus orienté entreprise donc plus complexe a configuré

L'objectif de cette VM est de créer des groupes, établir une connexion SSH, ajouter un firewall et faire tourner un script qui nous informe de l'état de la machine toutes les 10 minutes.

Pour Rocky :

SELinux permet de renforcé la sécurité avec beaucoup de controle dans le cas ou un utilisateur est compromis, le réseau peut continuer de fonctionner malgré tout.

DNF est un gestionnaire de paquet basé sur RPM pour les OS comme Rocky

Pour Debian :

AppArmor permet de créer des profils aux applications qui permet de donner un accès ou non aux app

Apt est un gestionnaire de paquet basé sur debian, il sert a intaller ou desintaller des logiciels en gérant ses dépendances.


SETUP


Connection avec un utilisateur créer

créer un user:
sudo adduser username

voir les users:
cat /etc/passwd ou cut -d: -f1 /etc/passwd

créer un group:
sudo addgroup groupe_name

voir les groupes de mon user actuelle:
groups

voir tous les groups
getent group ou cat /etc/group

ajouter un user a un grp:
sudo usermod -aG grp_name username

FireWall

(systemctl est un outils de gestion de service)
vérif UFW:
sudo systemctl status ufw
sudo ufw allow ssh
sudo ufw allow 4242
sudo ufw status numbered

vérifier SSH:
sudo systemctl status ssh

vérifier la ditribution:
cat /etc/os-release

Password Policy

sudo vim /etc/pam.d/common-password
https://debian-facile.org/doc:securite:passwd:libpam-pwquality

Hostname et partitions

voir le hostname:
hostname

modifié le hostname:
sudo vim /etc/hostname ou sudo hostnamectl set-hostname new_name

voir partition:
lsblk

LVM
gere dynamiquement le stockage contrairement aux partitions classiques, il permet de combiner, modifié les volumes et permet de faire des snapshots des volumes, la plupart du temps avec des partitions classiques on se retrouve a devoir reformater et démonter le volume pour modifié

SUDO

apt install sudo
/var/log/sudo/sudo.log

SSH
sudo apt install openssh-server
sudo vim /etc/ssh/sshd_config
sudo grep Port /etc/ssh/sshd_config
sudo service ssh restart
ssh your_username@127.0.0.1 -p 4242

Script Monitoring


apt-get install -y net-tools
cd /usr/local/bin/
monitoring.sh

Cron permet d'automatiser des taches en les executant de manière régulière
* * * * * /chemin/vers/commande
- - - - -
| | | | |   
| | | | +---- Jour de la semaine (0 - 6) (dimanche=0)
| | | +------ Mois (1 - 12)
| | +-------- Jour du mois (1 - 31)
| +---------- Heure (0 - 23)
+------------ Minute (0 - 59)


#!/bin/bash
arc=$(uname -a)
récupère les infos sur l'os et l'architecture du noyau dans une variable arc

CPU

pcpu=$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)
nombre de processeur physique

vcpu=$(grep "^processor" /proc/cpuinfo | wc -l)
nombre de processeur virtuels

Mémoire vive

fram=$(free -m | awk '$1 == "Mem:" {print $2}')
récupère la mémoire total (en Mo)

uram=$(free -m | awk '$1 == "Mem:" {print $3}')
récupère la mémoire utilisée (en Mo)

pram=$(free | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}')
et ici le pourcentage de mémoire utilisé

Disque

fdisk=$(df -BG | grep '^/dev/' | grep -v '/boot$' | awk '{ft += $2} END {print ft}')
espace disque total

udisk=$(df -BM | grep '^/dev/' | grep -v '/boot$' | awk '{ut += $3} END {print ut}')
espace disque utilisé

pdisk=$(df -BM | grep '^/dev/' | grep -v '/boot$' | awk '{ut += $3} {ft+= $2} END {printf("%d"), ut/ft*100}')
pourcentage du disque utilisé 

cpul=$(top -bn1 | grep '^%Cpu' | cut -c 9- | xargs | awk '{printf("%.1f%%"), $1 + $3}')
utilisation du CPU

lb=$(who -b | awk '$1 == "system" {print $3 " " $4}')
dernier démarrage

lvmu=$(if [ $(lsblk | awk '{print $6}' | grep "lvm" | wc -l) -eq 0 ]; then echo no; else echo yes; fi)
Vérifie si LVM est utilisé

ctcp=$(ss -Ht state established | wc -l)
Nombre de connexion TCP établie

ulog=$(users | wc -w)
nombre d'utilisateur connecté

ip=$(hostname -I)
récupère l'IP du systeme

mac=$(ip link show | grep "ether" | awk '{print $2}')
récupère l'adresse MAC

cmds=$(journalctl _COMM=sudo | grep COMMAND | wc -l)
Nombre de commandes exectué

Affiche a tous les users connectés
wall "	#Architecture: $arc
	#CPU physical: $pcpu
	#vCPU: $vcpu
	#Memory Usage: $uram/${fram}MB ($pram%)
	#Disk Usage: $udisk/${fdisk}Gb ($pdisk%)
	#CPU load: $cpul
	#Last boot: $lb
	#LVM use: $lvmu
	#Connections TCP: $ctcp ESTABLISHED
	#User log: $ulog
	#Network: IP $ip ($mac)
	#Sudo: $cmds cmd"















